#!/usr/bin/env python3
import os, sys, shutil
import yaml
from pathlib import Path
from subprocess import check_output
from packaging import version
from distutils.dist import strtobool
from sensors.agent import SensorAgent

def main(args):
  config = {}

  #
  # Attempt to load YAML config file
  #
  if len(args) > 0:
    file = args[0]
    try:
      with open(file, 'r') as yamlconfig:
        config = yaml.safe_load(yamlconfig)
    except Exception as e:
      # Warn if there was an error, but try to continue anyway
      print("WARNING: {}".format(str(e)), file=sys.stderr)


  #
  # Import any config parameters that are available as environment vars
  #
  mqtt_broker   = os.environ.get('MQTT_BROKER')     # Hostname or hostname:port
  mqtt_username = os.environ.get('MQTT_USERNAME')
  mqtt_password = os.environ.get('MQTT_PASSWORD')
  update_period = os.environ.get('UPDATE_PERIOD')   # Number in seconds
  valid_time    = os.environ.get('VALID_TIME')      # Number in seconds
  verbose       = os.environ.get('VERBOSE')         # Any pseudo-boolean string such as: yes, no, on, off, true, false, 1, 0
  sensor_types  = os.environ.get('SENSOR_TYPES')    # Comma-separated list of sensor types, e.g. 'ds18b20, bme280'
  # location can be either a simple string (for single/all sensors),
  # or a comma-separated list of id=location entries for multiple sensors,
  # e.g. 'id0001=Bedroom,id002=Living Room'
  location      = os.environ.get('LOCATION')
  # sensor_offset can be a single value (applied to all sensors), or
  # a comma-separated list of id=offset entries,
  # e.g. 'id0001=0.5,id0002=-1.5'
  sensor_offset = os.environ.get('SENSOR_OFFSET')
  # Set the via_device to the Balena device hostname     
  balena_host   = os.environ.get('BALENA_DEVICE_NAME_AT_INIT')

  if mqtt_broker is not None:
    try:
      host, port = mqtt_broker.split(':')
    except ValueError:
      host = mqtt_broker
      port = None
    config['mqtt_broker'] = host
    if port is not None:
      config['mqtt_port'] = int(port)
  
  if mqtt_username is not None:
    config['mqtt_username'] = mqtt_username
  if mqtt_password is not None:
    config['mqtt_password'] = mqtt_password

  if update_period is not None:
    config['update_period'] = int(update_period)

  if valid_time is not None:
    config['valid_time'] = int(valid_time)
  
  if verbose is not None:
    config['verbose'] = bool(strtobool(verbose))

  if sensor_types is not None:
    config['sensor_types'] = [ t.strip() for t in sensor_types.split(',') ]

  if location is not None:
    if '=' in location and ',' in location:
      config['sensor_location'] = dict(i.strip().split('=') for i in location.split(','))
    else:
      config['sensor_location'] = str(location).strip()

  if sensor_offset is not None:
    if '=' in sensor_offset and ',' in sensor_offset:
      config['sensor_offset'] = { str(k):float(v) for k,v in (i.strip().split('=') for i in sensor_offset.split(',')) }
    else:
      config['sensor_offset'] = float(sensor_offset.strip())

  if balena_host is not None:
    config['host_device'] = balena_host

  #
  # Prepare BSEC data files if necessary
  #
  if 'sensor_types' not in config or (
      'sensor_types' in config and 
      'bme680' in config['sensor_types'] ):
    volume_dir = Path("/data")
    if volume_dir.exists():
      data_dir = volume_dir.joinpath("bsec")
      opt_dir  = Path("/opt/bsec")
      data_version_file = data_dir.joinpath("version")
      opt_version = version.parse(check_output(['/opt/bsec/bsec_bme680', '--version'], text=True))
      # Compare binary in /opt with recorded version in /data
      if data_version_file.exists():
        data_version = version.parse(data_version_file.read_text().rstrip())
        if data_version != opt_version:
          print("BSEC library versions differ, wiping existing state...")
          data_dir.joinpath("bsec_iaq.state").unlink(missing_ok=True)
      # Create data dir and copy config file (it's missing if this is a fresh install, or it was wiped above)
      data_dir.mkdir(exist_ok=True)
      shutil.copy(opt_dir.joinpath("bsec_iaq.config"), data_dir.joinpath("bsec_iaq.config"))
      data_version_file.write_text(opt_version.public) # Record the /opt binary vesion in /data version file
    else:
      print("Persistent storage ({}) not available, skipping BSEC checks".format(volume_dir))


  #
  # Start agent
  #
  sensors = SensorAgent(config)
  sensors.start()


if __name__ == "__main__":
  main(sys.argv[1:])
