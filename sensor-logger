#!/usr/bin/env python3
import os, sys, yaml
from pathlib import Path
from distutils.dist import strtobool
from sensors.agent import SensorAgent

def main(args):
  if not args or len(args) != 1:
    sys.exit("Usage: {} [CONFIG-FILE]".format(Path(__file__).name))
  else:
    # Load YAML config file
    try:
      with open(args[0], 'r') as yamlconfig:
        config = yaml.safe_load(yamlconfig)
    except:
      sys.exit("{} ({})".format(sys.exc_info[1], args[0]))

    # Override any config parameters that are available as environment vars
    mqtt_broker   = os.environ.get('MQTT_BROKER')     # Hostname or hostname:port
    mqtt_username = os.environ.get('MQTT_USERNAME')
    mqtt_password = os.environ.get('MQTT_PASSWORD')
    update_period = os.environ.get('UPDATE_PERIOD')   # Number in seconds
    verbose       = os.environ.get('VERBOSE')         # Any pseudo-boolean string such as: yes, no, on, off, true, false, 1, 0
    sensor_types  = os.environ.get('SENSOR_TYPES')    # Comma-separated list of sensor types, e.g. 'ds18b20, bme280'

    if mqtt_broker is not None:
      try:
        host, port = mqtt_broker.split(':')
      except ValueError:
        host = mqtt_broker
        port = None
      config['mqtt']['broker'] = host
      if port is not None:
        config['mqtt']['port'] = int(port)
    
    if mqtt_username is not None:
      config['mqtt']['username'] = mqtt_username
    if mqtt_password is not None:
      config['mqtt']['password'] = mqtt_password

    if update_period is not None:
      config['update_period'] = int(update_period)
    
    if verbose is not None:
      config['verbose'] = bool(strtobool(verbose))

    if sensor_types is not None:
      config['sensor_types'] = [ t.strip() for t in sensor_types.split(',') ]

    # Start agent
    sensors = SensorAgent(config)
    sensors.start()

if __name__ == "__main__":
  main(sys.argv[1:])