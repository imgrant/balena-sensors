#!/usr/bin/env python3
import os, sys, shutil
import yaml
from pathlib import Path
from filecmp import cmp as Compare
from distutils.dist import strtobool
from sensors.agent import SensorAgent

def main(args):
  config = {}

  #
  # Prepare BSEC data files if necessary
  #
  volume_dir = "/data"
  if Path(volume_dir).exists():
    data_dir = volume_dir + "/bsec"
    opt_dir  = "/opt/bsec"
    files =  [ "version", "bsec_iaq.state", "bsec_iaq.config" ]
    d = Path(data_dir)
    if d.exists() and d.is_dir():
      if Compare(data_dir + "/version", opt_dir + "/version") is False:
        print("BSEC library versions differ, clearing existing state...")
        for f in files:
          Path(data_dir + "/" + f).unlink(missing_ok=True)
    Path(data_dir).mkdir(exist_ok=True)
    for f in files:
      dest = Path(data_dir + "/" + f)
      src = Path(opt_dir + "/" + f)
      if dest.exists() is False:
        dest.touch()
        if src.exists():
          shutil.copy(src, dest)
  else:
    print("Persistent storage ({}) not available, skipping BSEC checks".format(volume_dir))


  #
  # Attempt to load YAML config file
  #
  if len(args) > 0:
    file = args[0]
    try:
      with open(file, 'r') as yamlconfig:
        config = yaml.safe_load(yamlconfig)
    except Exception as e:
      # Warn if there was an error, but try to continue anyway
      print("WARNING: {}".format(str(e)), file=sys.stderr)


  #
  # Import any config parameters that are available as environment vars
  #
  mqtt_broker   = os.environ.get('MQTT_BROKER')     # Hostname or hostname:port
  mqtt_username = os.environ.get('MQTT_USERNAME')
  mqtt_password = os.environ.get('MQTT_PASSWORD')
  update_period = os.environ.get('UPDATE_PERIOD')   # Number in seconds
  verbose       = os.environ.get('VERBOSE')         # Any pseudo-boolean string such as: yes, no, on, off, true, false, 1, 0
  sensor_types  = os.environ.get('SENSOR_TYPES')    # Comma-separated list of sensor types, e.g. 'ds18b20, bme280'
  # location can be either a simple string (for single/all sensors),
  # or a comma-separated list of id=location entries for multiple sensors,,
  # e.g. 'id0001=Bedroom,id002=Living Room'
  location      = os.environ.get('LOCATION')
  # Set the via_device to the Balena device hostname     
  balena_host   = os.environ.get('BALENA_DEVICE_NAME_AT_INIT')

  if mqtt_broker is not None:
    try:
      host, port = mqtt_broker.split(':')
    except ValueError:
      host = mqtt_broker
      port = None
    config['mqtt_broker'] = host
    if port is not None:
      config['mqtt_port'] = int(port)
  
  if mqtt_username is not None:
    config['mqtt_username'] = mqtt_username
  if mqtt_password is not None:
    config['mqtt_password'] = mqtt_password

  if update_period is not None:
    config['update_period'] = int(update_period)
  
  if verbose is not None:
    config['verbose'] = bool(strtobool(verbose))

  if sensor_types is not None:
    config['sensor_types'] = [ t.strip() for t in sensor_types.split(',') ]

  if location is not None:
    if '=' in location and ',' in location:
      config['sensor_location'] = dict(i.strip().split('=') for i in location.split(','))
    else:
      config['sensor_location'] = str(location).strip()

  if balena_host is not None:
    config['host_device'] = balena_host
    
  # Start agent
  sensors = SensorAgent(config)
  sensors.start()

if __name__ == "__main__":
  main(sys.argv[1:])